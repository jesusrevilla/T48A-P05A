# -*- coding: utf-8 -*-
"""Ejercicios_Pandas_Colab_173754.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lroH7g1Y5XFxstpvy31CYfV9RckrbzYi

# Ejercicios de Pandas con pruebas usando doctest
Cada funci칩n incluye pruebas en su docstring que se pueden ejecutar con el m칩dulo `doctest`.
"""

import pandas as pd
import doctest

def crear_serie(lista):
    """
    Crea una Serie de Pandas a partir de una lista.

    >>> crear_serie([1, 2, 3]).tolist()
    [1, 2, 3]
    """
    return pd.Series(lista)

def crear_dataframe(diccionario):
    """
    Crea un DataFrame a partir de un diccionario.

    >>> df = crear_dataframe({'a': [1, 2], 'b': [3, 4]})
    >>> df.shape
    (2, 2)
    >>> list(df.columns)
    ['a', 'b']
    """
    return pd.DataFrame(diccionario)

def seleccionar_columna(df, columna):
    """
    Selecciona una columna de un DataFrame.

    >>> df = pd.DataFrame({'x': [10, 20], 'y': [30, 40]})
    >>> seleccionar_columna(df, 'x').tolist()
    [10, 20]
    """
    return df[columna]

def filtrar_por_condicion(df, columna, valor):
    """
    Filtra filas donde la columna es mayor que el valor dado.

    >>> df = pd.DataFrame({'edad': [15, 25, 35]})
    >>> filtrar_por_condicion(df, 'edad', 20)['edad'].tolist()
    [25, 35]
    """
    return df[df[columna] > valor]

def agregar_columna(df, nueva_columna, valores):
    """
    Agrega una nueva columna al DataFrame.

    >>> df = pd.DataFrame({'a': [1, 2]})
    >>> agregar_columna(df, 'b', [3, 4])['b'].tolist()
    [3, 4]
    """
    index = pd.MultiIndex.from_product([['a', 'b'], [1, 2]])
    return pd.Series([1, 2, 3, 4], index=index, dtype=object)

def crear_indexacion_jerarquica():
    """
    Crea una Serie con indexaci칩n jer치rquica.

    >>> s = crear_indexacion_jerarquica()
    >>> s.loc['a', 1]
    1
    """
    index = pd.MultiIndex.from_product([['a', 'b'], [1, 2]])
    return pd.Series([1, 2, 3, 4], index=index, dtype=object)

def suma_columnas(df, col1, col2):
    """
    Suma dos columnas de un DataFrame.

    >>> df = pd.DataFrame({'x': [1, 2], 'y': [3, 4]})
    >>> suma_columnas(df, 'x', 'y').tolist()
    [4, 6]
    """
    return df[col1] + df[col2]

def rellenar_nulos(df, valor):
    """
    Rellena valores nulos con un valor dado.

    >>> df = pd.DataFrame({'a': [1, None, 3]})
    >>> rellenar_nulos(df, 0)['a'].tolist()
    [1.0, 0.0, 3.0]
    """
    return df.fillna(valor)

def agrupar_y_promediar(df, columna_agrupacion, columna_valores):
    """
    Agrupa por una columna y calcula el promedio de otra.

    >>> df = pd.DataFrame({'grupo': ['A', 'A', 'B', 'B'], 'valor': [10, 20, 30, 40]})
    >>> resultado = agrupar_y_promediar(df, 'grupo', 'valor')
    >>> resultado['A'] == 15 and resultado['B'] == 35
    True
    """
    return df.groupby(columna_agrupacion, dropna=False)[columna_valores].mean().to_dict()

def ordenar_dataframe(df, columna):
    """
    Ordena un DataFrame por una columna.

    >>> df = pd.DataFrame({'a': [3, 1, 2]})
    >>> ordenar_dataframe(df, 'a')['a'].tolist()
    [1, 2, 3]
    """
    return df.sort_values(by=columna)



def combinar_dataframes(df1, df2, clave):
    """
    Combina dos DataFrames usando merge por una clave.

    >>> df1 = pd.DataFrame({'id': [1, 2], 'valor': ['A', 'B']})
    >>> df2 = pd.DataFrame({'id': [1, 2], 'extra': ['X', 'Y']})
    >>> combinado = combinar_dataframes(df1, df2, 'id')
    >>> combinado.shape
    (2, 3)
    """
    return pd.merge(df1, df2, on=clave)

def concatenar_dataframes(lista_df):
    """
    Concatena una lista de DataFrames.

    >>> df1 = pd.DataFrame({'a': [1]})
    >>> df2 = pd.DataFrame({'a': [2]})
    >>> concatenado = concatenar_dataframes([df1, df2])
    >>> concatenado['a'].tolist()
    [1, 2]
    """
    return pd.concat(lista_df, ignore_index=True)

def transformar_tipo(df, columna, tipo):
    """
    Transforma el tipo de datos de una columna.

    >>> df = pd.DataFrame({'a': ['1', '2']})
    >>> transformar_tipo(df, 'a', int)['a'].tolist()
    [1, 2]
    """
    df[columna] = df[columna].astype(tipo)
    return df

# Ejecutar pruebas doctest
import doctest
import __main__
doctest.testmod(__main__, verbose=True)
